plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.lox.productcatalog'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

// Grouped Dependencies

dependencies {
	// Core Spring Boot Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// JWT Dependencies
	implementation 'com.auth0:java-jwt:3.18.2'

	// Spring Cloud Dependencies
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// Database Dependencies
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.postgresql:postgresql'
	implementation 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.postgresql:postgresql'

	// Resilience4j Circuit Breaker
	implementation 'io.github.resilience4j:resilience4j-spring-boot2'
	// Resilience4j Retry if needed
	implementation 'io.github.resilience4j:resilience4j-retry'
	// Resilience4j Rate Limiter if needed
	implementation 'io.github.resilience4j:resilience4j-ratelimiter'
	// Spring Boot Starter AOP for Resilience4j annotations
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'


	// Redis Dependencies
	implementation 'org.springframework.data:spring-data-redis'
	implementation 'io.lettuce:lettuce-core:6.5.1.RELEASE'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// Messaging Dependencies
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.projectreactor.kafka:reactor-kafka'

	// Observability Dependencies
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'io.micrometer:micrometer-observation'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
	implementation 'com.github.loki4j:loki-logback-appender:1.5.2'

	// Development Dependencies
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct Dependencies
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Testing Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.0'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task listFilesInAuthService {
	doLast {
		def basePackage = "com/lox/productcatalog" // Path of the package you want to list
		def sourceDirs = [
				file("${projectDir}/src/main/java/${basePackage}"),
				file("${projectDir}/src/main/resources/${basePackage}")
		]

		sourceDirs.each { dir ->
			if (dir.exists()) {
				println "Listing files in: ${dir}"
				dir.eachFileRecurse { file ->
					if (file.isFile()) {
						def relativePath = file.path.replace(projectDir.path + File.separator, '')
						println relativePath
					}
				}
			} else {
				println "The directory ${dir} does not exist."
			}
		}
	}
}
